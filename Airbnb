# Installing important Libraries
import pandas as pd
import pymongo
import plotly.express as px
import streamlit as st
from streamlit_option_menu import option_menu
pd.set_option('display.max_columns', None)
from io import BytesIO
#from sklearn.cluster import KMeans
#import folium

# Connection to Mongodb Atlas
mongodb_url = "mongodb+srv://root:root@cluster1.yaagwlq.mongodb.net/?retryWrites=true&w=majority"
client = pymongo.MongoClient(mongodb_url)
db = client.get_database("sample_airbnb")
collection = db.get_collection("listingsAndReviews")

# Retrieving data collection from MongoDB Atlas

documents = collection.find({})
for document in documents:
    print(document)

# Fetching important columns for the Initial Table

data = []
for i in collection.find( {}, {'_id':1, 'name':1,'property_type':1,'room_type':1,'bed_type':1,
                        'minimum_nights':1,'maximum_nights':1,'cancellation_policy':1,'accommodates':1,
                        'bedrooms':1,'beds':1,'number_of_reviews':1,'bathrooms':1,'price':1,
                        'cleaning_fee':1,'extra_people':1,'guests_included':1,'images.picture_url':1,
                        'review_scores.review_scores_rating':1} ):
    data.append(i)

# Converting into Dataframe
df = pd.DataFrame(data)
df

# Data Pre-processing
df['images'] = [x.get('picture_url', '') if isinstance(x, dict) else x for x in df['images']]
df['review_scores'] = [x.get('review_scores_rating', '') if isinstance(x, dict) else x for x in df['review_scores']]
df

# Basic Stats of the dataframe
df.shape
df.describe().T
df.info()

## Checking for null values
df.isnull().sum()

# Handling missing values
df['bedrooms'].fillna(0, inplace=True)
df['beds'].fillna(0, inplace=True)
df['bathrooms'].fillna(0, inplace=True)
df['cleaning_fee'].fillna('Not Specified', inplace=True)  
df.isnull().sum()
df.dtypes

# Converting Datatypes

df['minimum_nights'] = df['minimum_nights'].astype(int)
df['maximum_nights'] = df['maximum_nights'].astype(int)
df['bedrooms'] = df['bedrooms'].astype(int)
df['beds'] = df['beds'].astype(int)
df['bathrooms'] = df['bathrooms'].astype(str).astype(float)
df['price'] = df['price'].astype(str).astype(float).astype(int)
df['cleaning_fee'] = df['cleaning_fee'].apply(lambda x: int(float(str(x))) if x != 'Not Specified' else 'Not Specified')
df['extra_people'] = df['extra_people'].astype(str).astype(float).astype(int)
df['guests_included'] = df['guests_included'].astype(str).astype(int)

df.dtypes

df.describe().T

# Address Table

address = []
for i in collection.find( {}, {'_id':1, 'address':1}):
    address.append(i)

df_address = pd.DataFrame(address)
address_keys = list(df_address.iloc[0,1].keys())

for i in address_keys:
    if i == 'location':
        df_address['location_type'] = df_address['address'].apply(lambda x: x['location']['type'])
        df_address['longitude'] = df_address['address'].apply(lambda x: x['location']['coordinates'][0])
        df_address['latitude'] = df_address['address'].apply(lambda x: x['location']['coordinates'][1])
        df_address['is_location_exact'] = df_address['address'].apply(lambda x: x['location']['is_location_exact'])
    else:
        df_address[i] = df_address['address'].apply(lambda x: x[i] if x[i]!='' else 'Not Specified')

df_address.drop(columns=['address'], inplace=True)
df_address.head()

df_address['is_location_exact'] = df_address['is_location_exact'].map({False:'No',True:'Yes'})
df_address.head()

df_address.isnull().sum()

# Host Table

host = []
for i in collection.find( {}, {'_id':1, 'host':1}):
    host.append(i)

df_host = pd.DataFrame(host)
host_keys = list(df_host.iloc[0,1].keys())
host_keys.remove('host_about')

for i in host_keys:
    if i == 'host_response_time':
        df_host['host_response_time'] = df_host['host'].apply(lambda x: x['host_response_time'] if 'host_response_time' in x else 'Not Specified')
    else:
        df_host[i] = df_host['host'].apply(lambda x: x[i] if i in x and x[i]!='' else 'Not Specified')

df_host.drop(columns=['host'], inplace=True)
df_host.head()

df_host['host_is_superhost'] = df_host['host_is_superhost'].map({False:'No',True:'Yes'})
df_host['host_has_profile_pic'] = df_host['host_has_profile_pic'].map({False:'No',True:'Yes'})
df_host['host_identity_verified'] = df_host['host_identity_verified'].map({False:'No',True:'Yes'})
df_host.head()

df_host.isnull().sum()

df_host.dtypes

# Availability Table

availability = []
for i in collection.find( {}, {'_id':1, 'availability':1}):
    availability.append(i)

df_availability = pd.DataFrame(availability)
availability_keys = list(df_availability.iloc[0,1].keys())

for i in availability_keys:
    df_availability['availability_30'] = df_availability['availability'].apply(lambda x: x['availability_30'])
    df_availability['availability_60'] = df_availability['availability'].apply(lambda x: x['availability_60'])
    df_availability['availability_90'] = df_availability['availability'].apply(lambda x: x['availability_90'])
    df_availability['availability_365'] = df_availability['availability'].apply(lambda x: x['availability_365'])

df_availability.drop(columns=['availability'], inplace=True)
df_availability.head()

df_availability.isnull().sum()

df_availability.dtypes

# Amenities Table

amenities = []
for i in collection.find( {}, {'_id':1, 'amenities':1}):
    amenities.append(i)

df_amenities = pd.DataFrame(amenities)
df_amenities.head()

# Apply sorting to the 'amenities' column
df_amenities['amenities'] = df_amenities['amenities'].apply(lambda x: sorted(x))

# Display the DataFrame
df_amenities.head()

df_amenities.isnull().sum()

df_amenities.dtypes

df_new = pd.merge(df, df_host, on='_id')
df_new = pd.merge(df_new, df_address, on='_id')
df_new = pd.merge(df_new, df_availability, on='_id')
df_new = pd.merge(df_new, df_amenities, on='_id')
df_new
df_new.dtypes

#Data Visualization

fig = px.pie(df_new, names='price', values='host_response_time', hole=0.5, title="Host Response Time")

#fig.update_layout(title_x=title_x, title_font_size=22)

fig.update_traces(text=df_new[y], textinfo='percent+value',
                          textposition='outside',
                      textfont=dict(color='white'))
fig.show()

# DataFrame 'df_new' with columns 'price' and 'host_response_time'

fig = px.pie(df_new, names='host_response_time', values='price', hole=0.5, title="Host Response Time")

# Update the chart properties
fig.update_traces(textinfo='percent+value', textposition='outside', textfont=dict(color='white'))

# Display the chart
fig.show()

#Property Distribution
fig = px.histogram(df, y='property_type', title="Property Type Distribution", orientation='h',
             color_discrete_sequence=['darkblue'])  # Set the bar color to blue
fig.update_layout(
    paper_bgcolor='white',  # Background color of the chart
    plot_bgcolor='white'    # Background color of the plot area
)
fig.show()

fig = px.bar(df, y='property_type', title="Property Type Distribution", orientation='h')

# Customize the bar color
fig.update_traces(marker_color='orange') 
fig.show()

#Top 10 Property types
# Calculate the frequency of each property type
top_property_types = df_new['property_type'].value_counts().head(10).index.tolist()

# Filter the DataFrame to select only the top 10 property types
filtered_df = df_new[df_new['property_type'].isin(top_property_types)]

# Create a Vertical Histogram for the top 10 Property Types with black background
fig = px.histogram(filtered_df, x='property_type', title="Top 10 Property Types Distribution")

# Customize the bar color
fig.update_traces(marker_color='darkblue')  # Set the bar color to light blue

# Set the chart background to black
fig.update_layout(
    paper_bgcolor='white',  # Background color of the chart
    plot_bgcolor='white'    # Background color of the plot area
)

# Display the chart
fig.show()


# Calculate the counts of superhost and non-superhost
superhost_counts = df_new['host_is_superhost'].value_counts()

# Create a Host Superhost Status Pie Chart
fig = px.pie(superhost_counts, names=superhost_counts.index, values=superhost_counts.values, title="Host Superhost Status")

# Customize the chart if needed

# Display the chart
fig.show()

# Calculate the frequency of each superhost status
superhost_counts = df_new['host_is_superhost'].value_counts()

# Select the top 10 superhosts
top_10_superhosts = superhost_counts.head(10)

# Create a Bar Chart for the top 10 Superhosts
fig = px.bar(top_10_superhosts, x=top_10_superhosts.index, y=top_10_superhosts.values, title="Top 10 Superhosts")

# Customize the chart if needed

# Display the chart
fig.show()

# Calculate the frequency of each superhost status for each host
superhost_counts = df_new.groupby(['host_name', 'host_is_superhost']).size().unstack(fill_value=0)

# Find the top 10 superhosts
top_10_superhosts = superhost_counts['Yes'].nlargest(10)

# Create a Bar Chart for the top 10 Superhosts
fig = px.bar(x=top_10_superhosts.index, y=top_10_superhosts.values, title="Top 10 Superhosts")

# Customize the chart if needed

# Display the chart
fig.show()

#Top 10 Hosts
# Sort the DataFrame by the number of reviews in descending order and select the top 10 hosts
top_10_hosts = df_new.sort_values(by='number_of_reviews', ascending=False).head(10)

# Create a Vertical Histogram for the top 10 hosts
fig = px.bar(top_10_hosts, x='host_name', y='number_of_reviews', title="Top 10 Hosts with Most Reviews")

# Customize the chart if needed

# Display the chart
fig.show()

#Top 10 properties
# First, sort the DataFrame by the 'number_of_reviews' column in descending order.
df_sorted = df_new.sort_values(by='number_of_reviews', ascending=False)

# Then, you can select the top N properties (e.g., top 10) with the most reviews.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create a bar chart to visualize the top properties.
plt.figure(figsize=(12, 6))
plt.bar(top_properties['name'], top_properties['number_of_reviews'])
plt.xlabel('Property Name')
plt.ylabel('Number of Reviews')
plt.title(f'Top {top_N} Properties with Most Reviews')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility

plt.tight_layout()
plt.show()

#Propterty with Top Reviews
# First, sort the DataFrame by the 'number_of_reviews' column in descending order.
df_sorted = df_new.sort_values(by='number_of_reviews', ascending=False)

# Then, you can select the top N properties (e.g., top 10) with the most reviews.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create a horizontal bar chart to visualize the top properties.
plt.figure(figsize=(10, 6))
plt.barh(top_properties['name'], top_properties['number_of_reviews'])
plt.xlabel('Number of Reviews')
plt.ylabel('Property Name')
plt.title(f'Top {top_N} Properties with Most Reviews')

plt.tight_layout()
plt.show()

# First, sort the DataFrame by the 'number_of_reviews' column in ascending order.
df_sorted = df_new.sort_values(by='number_of_reviews', ascending=True)

# Then, you can select the top N properties (e.g., top 10) with the most reviews.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create an interactive horizontal bar chart with hover text.
fig = px.bar(top_properties, x='number_of_reviews', y='name', text='number_of_reviews',
             orientation='h', title=f'Top {top_N} Properties with Least Reviews (Ascending Order)',
             labels={'number_of_reviews': 'Number of Reviews', 'name': 'Property Name'})

# Customize the appearance of the chart.
fig.update_traces(texttemplate='%{text}', textposition='inside', textfont_size=14)
fig.update_layout(xaxis_title='Number of Reviews', yaxis_title='Property Name')

# Show the chart interactively.
fig.show()

#Least 10 review property
# First, sort the DataFrame by the 'number_of_reviews' column in descending order.
df_sorted = df_new.sort_values(by='number_of_reviews', ascending=False)

# Then, you can select the top N properties (e.g., top 10) with the most reviews.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create an interactive horizontal bar chart with hover text.
fig = px.bar(top_properties, x='number_of_reviews', y='name', text='number_of_reviews',
             orientation='h', title=f'Top {top_N} Properties with Most Reviews',
             labels={'number_of_reviews': 'Number of Reviews', 'name': 'Property Name'})

# Customize the appearance of the chart.
fig.update_traces(texttemplate='%{text}', textposition='inside', textfont_size=14)
fig.update_layout(xaxis_title='Number of Reviews', yaxis_title='Property Name')

# Show the chart interactively.
fig.show()

#Property Available for 365 days
# Sort the DataFrame by 'availability_365' in ascending order.
df_sorted = df_new.sort_values(by='availability_365', ascending=True)

# Select the top N properties (e.g., top 10) with the least availability for 365 days.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create a line chart to visualize availability for the selected properties.
plt.figure(figsize=(12, 6))
for property_name, availability in zip(top_properties['name'], top_properties['availability_365']):
    plt.plot([property_name] * len(availability), availability, marker='o', label=property_name)

plt.xlabel('Property Name')
plt.ylabel('Availability for 365 Days')
plt.title(f'Availability for Top {top_N} Properties for 365 Days')
plt.xticks(rotation=45, ha='right')
plt.legend()

plt.tight_layout()
plt.show()


# Sort the DataFrame by 'availability_365' in ascending order.
df_sorted = df_new.sort_values(by='availability_365', ascending=True)

# Select the top N properties (e.g., top 10) with the least availability for 365 days.
top_N = 10
top_properties = df_sorted.head(top_N)

# Create a line chart to visualize availability for the selected properties.
plt.figure(figsize=(12, 6))
for property_name, availability in zip(top_properties['name'], top_properties['availability_365']):
    plt.plot([property_name], [availability], marker='o', label=property_name)

plt.xlabel('Property Name')
plt.ylabel('Availability for 365 Days')
plt.title(f'Availability for Top {top_N} Properties for 365 Days')
plt.xticks(rotation=45, ha='right')
plt.legend()

plt.tight_layout()
plt.show()


import matplotlib.pyplot as plt
import seaborn as sns

# Location-based analysis (e.g., suburb)
plt.figure(figsize=(12, 6))
sns.scatterplot(data=df_new, x='suburb', y='price')
plt.xticks(rotation=90)
plt.title('Price Distribution by Suburb')
plt.show()

#Average Price of property
# Aggregating data by suburb and calculating the median price for each suburb
suburb_median_prices = df_new.groupby('suburb')['price'].median().reset_index()

# Sorting the suburbs by median price in ascending order
suburb_median_prices = suburb_median_prices.sort_values(by='price')

plt.figure(figsize=(12, 6))
sns.barplot(data=suburb_median_prices, x='price', y='suburb')
plt.xlabel('Median Price')
plt.ylabel('Suburb')
plt.title('Median Price by Suburb')
plt.xticks(rotation=90)
plt.show()

# Aggregating data by suburb and calculating the median price for each suburb
suburb_median_prices = df_new.groupby('suburb')['price'].median().reset_index()

# Sorting the suburbs by median price in descending order and selecting the top 10
suburb_median_prices = suburb_median_prices.sort_values(by='price', ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(data=suburb_median_prices, x='price', y='suburb')
plt.xlabel('Median Price')
plt.ylabel('Suburb')
plt.title('Top 10 Suburbs with the Highest Median Price')
plt.xticks(rotation=90)
plt.show()

# Aggregating data by suburb and calculating the median price for each suburb
suburb_median_prices = df_new.groupby('suburb')['price'].median().reset_index()

# Sorting the suburbs by median price in descending order and selecting the top 10
suburb_median_prices = suburb_median_prices.sort_values(by='price', ascending=False).head(10)

plt.figure(figsize=(12, 6))
ax = sns.barplot(data=suburb_median_prices, x='price', y='suburb')
plt.xlabel('Median Price')
plt.ylabel('Suburb')
plt.title('Top 10 Suburbs with the Highest Median Price')
plt.xticks(rotation=90)

# Add price annotations inside the bars
for p in ax.patches:
    ax.annotate(f"${p.get_width():.2f}", (p.get_width(), p.get_y() + p.get_height() / 2), ha='left', va='center')

plt.show()

# Property type-based analysis with hover text
fig = px.scatter(df_new, x='property_type', y='price', text='price')
fig.update_traces(textposition='top center')
fig.update_layout(
    xaxis_title='Property Type',
    yaxis_title='Price',
    title='Price Distribution by Property Type'
)
fig.update_xaxes(tickangle=45)
fig.show()

#Highest Price Property - Country-wise
# Group the data by 'country' and find the property with the highest price in each group
most_expensive_properties = df_new.groupby('country').apply(lambda x: x.loc[x['price'].idxmax()])

# Create an interactive bar chart with price displayed inside the bar when hovering
fig = px.bar(most_expensive_properties, x='country', y='price',
             labels={'country': 'Country', 'price': 'Price'},
             title='Most Expensive Property Price by Country')

fig.update_traces(text=most_expensive_properties['price'], textposition='inside')
fig.update_xaxes(categoryorder='total ascending')  # Sort bars by ascending price

fig.show()

# Group the data by 'country' and find the property with the highest price in each group
most_expensive_properties = df_new.groupby('country').apply(lambda x: x.loc[x['price'].idxmax()])

# Create a custom text column that includes both property name and price
most_expensive_properties['text'] = most_expensive_properties['name'] + ' - $' + most_expensive_properties['price'].astype(str)

# Create an interactive bar chart with property name and price displayed inside the bar when hovering
fig = px.bar(most_expensive_properties, x='country', y='price', text='text',
             labels={'country': 'Country', 'price': 'Price', 'text': 'Property Info'},
             title='Most Expensive Property by Country')

fig.update_traces(textposition='inside')
fig.update_xaxes(categoryorder='total ascending')  # Sort bars by ascending price

fig.show()
